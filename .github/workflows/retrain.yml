name: üå∏ Retrain Flower Model (CI/CD)

on:
  push:
    branches:
      - main # Or your main branch
    paths:
      - 'auto_retrain.py' # Trigger if the script itself changes
      - 'base_training_data/**' # Trigger if base data changes (e.g., you add more base images)
      - 'requirements.txt' # Trigger if dependencies change
  schedule:
    - cron: '0 0 * * *' # Run once a day at midnight UTC (adjust as needed)
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  train_and_deploy_model:
    runs-on: ubuntu-latest
    environment: production # Good practice for managing secrets and deployments

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip' # Cache pip dependencies for faster installs

      - name: üì¶ Install Python Dependencies
        run: |
          pip install -r requirements.txt
          # Ensure firebase-admin and google-cloud-storage are in requirements.txt
          # Also Pillow for PIL.Image if not already there.
          # Example if you didn't put them in requirements.txt (but you should!):
          # pip install firebase-admin google-cloud-storage Pillow

      - name: üß† Run Model Training Script
        env:
          # Pass the Firebase Service Account Key as an environment variable
          # This is CRITICAL for auto_retrain.py to authenticate with Firebase.
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          python auto_retrain.py
          # The Python script will now:
          # 1. Download user_training_data from Firebase Storage.
          # 2. Train the model (combining with base_training_data).
          # 3. Upload best_flower_model_v3.pt, class_to_label.json, and model_version.txt to Firebase Storage.
          # So, no separate download/upload steps are needed for these assets.
        
      # REMOVED: The '‚¨áÔ∏è Download Current Model Version (from Firebase)' step
      #         because auto_retrain.py now handles reading/incrementing the version directly from Firebase.

      # REMOVED: The '‚¨ÜÔ∏è Increment Model Version' step
      #         because auto_retrain.py handles the version increment and upload.

      # REMOVED: The 'üöÄ Upload Assets to Firebase Storage' step
      #         because auto_retrain.py now directly uploads the trained model,
      #         class map, and new version to Firebase Storage.

      - name: üßπ Clean up (Optional but Good Practice)
        run: |
          # Remove any large local files created during training/downloading
          rm -rf user_training_data/
          rm -f best_flower_model_v3.pt
          rm -f class_to_label.json
          rm -f model_version.txt
          rm -f best_model_weights.pth
        
      - name: üîî Notify on Completion
        if: always() # Run this step regardless of success or failure
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚ú® Model retraining and deployment successful via Python script!"
          else
            echo "üö® Model retraining and deployment failed! Check previous steps' logs."
          fi
          # You could integrate a notification action here if desired
          # uses: some-action/notify@v1
          # with:
          #   message: "Model retraining ${{ job.status }}"
